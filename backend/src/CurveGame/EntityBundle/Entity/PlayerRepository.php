<?php

namespace CurveGame\EntityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PlayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRepository extends EntityRepository {

    /**
     * Finds the 10 players with top scores.
     *
     * @param string $orderBy
     * @return array
     */
    public function findByTopTenScore($orderBy = 'DESC') {

        $dt = new \DateTime();

        $qb = $this->createQueryBuilder('p');
        $qb
            ->join('p.status', 's')
            ->addSelect('s')
            ->where('p.joinDate = :date')
            ->orderBy('p.score', $orderBy)
            ->setMaxResults(10)
            ->setParameter(':date', $dt->format('yyyy-mm-dd'));

        $query = $qb->getQuery();
        $result = $query->getResult();

        return $result;
    }

    /**
     * Finds players by a status name.
     *
     * @param string $status
     * @param string $orderBy
     * @return array|bool
     */
    public function findByStatus($status = 'waiting', $orderBy = 'ASC') {

        $qb = $this->createQueryBuilder('p')
            ->join('p.status', 's')
            ->addSelect('s')
            ->where('s.name = :statusName')
            ->orderBy('p.timestamp', $orderBy)
            ->setParameter('statusName', $status);

        $query = $qb->getQuery();
        $result = $query->getResult();

        // If status ready was passed and there are not 4 players, return false...
        if (count($result) === 4 && strtolower($status) === 'ready') {

            return $result;
        } else {

            return false;
        }
    }


    /**
     * Finds the position of the user in the queue list.
     *
     * @param null $hash
     * @return bool
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findPositionInQueue($hash = null) {

        // If no hash given, don't even bother to look 'em up.
        if (empty($hash)) return false;

        // Query to check if the user even exists.
        $checkQuery = "SELECT `players`.`hash` AS `playerHash`,
                              `players`.`id` AS `userId`,
                              `statuses`.`name` AS `status`
                       FROM `players`
                       JOIN `statuses`
                       ON `players`.`status_id`=`statuses`.`id`
                       WHERE `players`.`hash` = :uHash
                       AND `statuses`.`name`=\"waiting\"
                      ";

        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare($checkQuery);
        $stmt->bindValue(':uHash', $hash);
        $stmt->execute();

        $result = $stmt->fetch();
        $uId = $result['userId'];

        // No user found? Return false
        if (empty($uId) || !$uId) {

            return false;
        } else {

            // Query to get the position of the valid user.
            $query = "SELECT COUNT(`players`.`id`) AS `position`
                      FROM `players`
                      JOIN `statuses`
                      ON `players`.`status_id`=`statuses`.`id`
                      WHERE `players`.`id` <= :id
                      AND `statuses`.`name`=\"waiting\"
                     ";

            $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($query);
            $stmt->bindValue(':id', $uId);
            $stmt->execute();

            $result = $stmt->fetch();

            return $result['position'];
        }
    }
}